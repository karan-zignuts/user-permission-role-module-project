<?php

namespace App\Models;

use App\Models\Role;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Illuminate\Database\Eloquent\SoftDeletes;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $table = "users";
    use SoftDeletes;
    protected $fillable = [
        'first_name',
        'last_name',
        'email',
        'contact_no',
        'address',
        'status',
        'password',
        'invitation_token'
    ];


    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];
    use SoftDeletes;
    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public function roles()
    {
        return $this->belongsToMany(Role::class, 'user_role');
    }
    public function people()
    {
        return $this->hasMany(People::class);
    }
    public function company()
    {
        return $this->hasMany(Company::class);
    }
    public function note()
    {
        return $this->hasMany(Note::class);
    }
    public function activity()
    {
        return $this->hasMany(ActivityLog::class);
    }
    public function meeting()
    {
        return $this->hasMany(Meeting::class);
    }
    public function permission()
  {
    return $this->belongsToMany(Permission::class, 'permission_module' )->withPivot(
      'add',
      'view',
      'edit',
      'delete'
    );
  }

    public function hasPermission($moduleCode, $accessType)
    {
        // Get all roles of the user
        $roles = $this->roles()->with('permissions.modules')->get();
        foreach ($roles as $role) {
            foreach ($role->permissions as $permission) {
                foreach ($permission->modules as $module) {
                    if ($module->code === $moduleCode) {

                        if($module->pivot->$accessType) {
                            // Access the permission_module attributes
                            $addPermission      = $module->pivot->add;
                            $viewPermission     = $module->pivot->view;
                            $deletePermission   = $module->pivot->delete;
                            $editPermission     = $module->pivot->edit;
                            $roleWithPermission = $role->name;
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    //this function can be used to get the modules and submodules to the sidebar of user side .
    public function getPermissionModule()
    {
    $module = collect();
    foreach($this->roles as $role)
    {
        foreach($role->permissions as $permission)
        {
            $filter = $permission->modules->filter(function($module) use($permission)
            {
                return $module->pivot->view;
            });
        }
        $modules = $module->merge($filter);
    }
    return $modules->unique('code');
    }
    //This function can be used for check the access of the permission usinh middleware
    public static  function checkAccessPermission($user , $moduleCode)
    {

        $user = Auth::user();

       $userWithRolesAndPermissions = User::with('roles.permissions')->find($user->id);
       foreach ($userWithRolesAndPermissions->roles as $role) {
       foreach ($role->permissions as $permission) {
        // Access permission ID and role ID
        $permissionId = $permission->id;

        // Now, you can use $permissionId to query the permission_module table
        $permissionModuleData = DB::table('permission_module')
            ->where('permission_id', $permissionId)->where('module_code', $moduleCode )
            ->get();

        // Access data from the permission_module table as needed
        if ($permissionModuleData->isNotEmpty()) {
            $permissionModuleData = $permissionModuleData->first();

            return [
                'add'    => $permissionModuleData->add,
                'edit'   => $permissionModuleData->edit,
                'view'   => $permissionModuleData->view,
                'delete' => $permissionModuleData->delete,
            ];
        }
     }
    }
    }

}
